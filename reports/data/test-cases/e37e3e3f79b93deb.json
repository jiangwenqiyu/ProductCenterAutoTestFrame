{
  "uid" : "e37e3e3f79b93deb",
  "name" : "归类提交修改",
  "fullName" : "testFunctions.test_basicQuery.TestBasicQuery#test_query",
  "historyId" : "770be20ec95422c5eaed31165a6725b4",
  "time" : {
    "start" : 1642495741773,
    "stop" : 1642495742862,
    "duration" : 1089
  },
  "status" : "failed",
  "statusMessage" : "AssertionError: assert '2' == '1'\n  - 1\n  + 2",
  "statusTrace" : "self = <testFunctions.test_basicQuery.TestBasicQuery object at 0x0000025E27334AC8>\ninfo = {'data': {'classificationName': '漏电', 'note': '', 'taxCateName': '继电器保护装置', 'taxCateNo': '1090408050000000000', ...}, ...n/json;charset=UTF-8', 'cookie': 'uc_token=e957c609b1554018ae97fe1dc86e9cf1'}, 'method': 'POST', 'name': '归类提交修改', ...}\n\n    @allure.story('测试接口集')\n    @pytest.mark.parametrize('info', DealTest().getCases(**getDbInfo()))\n    @pytest.mark.flaky(reruns=2, reruns_delay=2)\n    def test_query(self, info):\n        time.sleep(1)\n        Dynamic.title(info['name'])\n    \n        method = info['method'].lower()\n        url = productEnvConfig.host + info['path']\n        header = info['header']\n        header['cookie'] = f'uc_token={productEnvConfig.token}'\n        reqType = info['reqType']\n        if reqType == 'json':\n            data = json.dumps(info['data'])\n        else:\n            data = info['data']\n        param = info['param']\n    \n    \n        with allure.step('请求地址:{}\\n'.format(url)):\n            pass\n        with allure.step('请求参数:data:{}\\nparam:{}\\n'.format(data, param)):\n            pass\n        with allure.step('请求头:{}\\n'.format(header)):\n            res = self.requests.request(method, url, header, data = data, params = param)\n    \n        with allure.step('返回参数:{}'.format(res.text)):\n            self.requests.myLog.debug('返回值: {}'.format(res.text))\n            assert res.status_code == 200\n>           assert res.json()['retStatus'] == '1'\nE           AssertionError: assert '2' == '1'\nE             - 1\nE             + 2\n\ntestFunctions\\test_basicQuery.py:59: AssertionError",
  "flaky" : false,
  "beforeStages" : [ ],
  "testStage" : {
    "status" : "failed",
    "statusMessage" : "AssertionError: assert '2' == '1'\n  - 1\n  + 2",
    "statusTrace" : "self = <testFunctions.test_basicQuery.TestBasicQuery object at 0x0000025E27334AC8>\ninfo = {'data': {'classificationName': '漏电', 'note': '', 'taxCateName': '继电器保护装置', 'taxCateNo': '1090408050000000000', ...}, ...n/json;charset=UTF-8', 'cookie': 'uc_token=e957c609b1554018ae97fe1dc86e9cf1'}, 'method': 'POST', 'name': '归类提交修改', ...}\n\n    @allure.story('测试接口集')\n    @pytest.mark.parametrize('info', DealTest().getCases(**getDbInfo()))\n    @pytest.mark.flaky(reruns=2, reruns_delay=2)\n    def test_query(self, info):\n        time.sleep(1)\n        Dynamic.title(info['name'])\n    \n        method = info['method'].lower()\n        url = productEnvConfig.host + info['path']\n        header = info['header']\n        header['cookie'] = f'uc_token={productEnvConfig.token}'\n        reqType = info['reqType']\n        if reqType == 'json':\n            data = json.dumps(info['data'])\n        else:\n            data = info['data']\n        param = info['param']\n    \n    \n        with allure.step('请求地址:{}\\n'.format(url)):\n            pass\n        with allure.step('请求参数:data:{}\\nparam:{}\\n'.format(data, param)):\n            pass\n        with allure.step('请求头:{}\\n'.format(header)):\n            res = self.requests.request(method, url, header, data = data, params = param)\n    \n        with allure.step('返回参数:{}'.format(res.text)):\n            self.requests.myLog.debug('返回值: {}'.format(res.text))\n            assert res.status_code == 200\n>           assert res.json()['retStatus'] == '1'\nE           AssertionError: assert '2' == '1'\nE             - 1\nE             + 2\n\ntestFunctions\\test_basicQuery.py:59: AssertionError",
    "steps" : [ {
      "name" : "请求地址:http://product.pre.xinfangsheng.com/sysback/classificationaudit/updateClassAudit\n",
      "time" : {
        "start" : 1642495742783,
        "stop" : 1642495742783,
        "duration" : 0
      },
      "status" : "passed",
      "steps" : [ ],
      "attachments" : [ ],
      "parameters" : [ ],
      "stepsCount" : 0,
      "hasContent" : false,
      "attachmentsCount" : 0,
      "shouldDisplayMessage" : false
    }, {
      "name" : "请求参数:data:{\"note\": \"\", \"uuid\": \"10007\", \"taxRate\": \"0.13\", \"version\": 0, \"taxCateNo\": \"1090408050000000000\", \"taxCateName\": \"\\u7ee7\\u7535\\u5668\\u4fdd\\u62a4\\u88c5\\u7f6e\", \"classificationName\": \"\\u6f0f\\u7535\"}\nparam:{'menuId': '210', 'buttonId': '3'}\n",
      "time" : {
        "start" : 1642495742783,
        "stop" : 1642495742783,
        "duration" : 0
      },
      "status" : "passed",
      "steps" : [ ],
      "attachments" : [ ],
      "parameters" : [ ],
      "stepsCount" : 0,
      "hasContent" : false,
      "attachmentsCount" : 0,
      "shouldDisplayMessage" : false
    }, {
      "name" : "请求头:{'Accept': 'application/json, text/plain, */*', 'Content-Type': 'application/json;charset=UTF-8', 'cookie': 'uc_token=e957c609b1554018ae97fe1dc86e9cf1'}\n",
      "time" : {
        "start" : 1642495742783,
        "stop" : 1642495742860,
        "duration" : 77
      },
      "status" : "passed",
      "steps" : [ ],
      "attachments" : [ ],
      "parameters" : [ ],
      "stepsCount" : 0,
      "hasContent" : false,
      "attachmentsCount" : 0,
      "shouldDisplayMessage" : false
    }, {
      "name" : "返回参数:{\"retStatus\":\"2\",\"retMessage\":\"该归类已经在审核中，不能修改\",\"retData\":null,\"timestamp\":0}",
      "time" : {
        "start" : 1642495742861,
        "stop" : 1642495742862,
        "duration" : 1
      },
      "status" : "failed",
      "statusMessage" : "AssertionError: assert '2' == '1'\n  - 1\n  + 2\n",
      "statusTrace" : "  File \"F:\\MyProject\\PythonProject\\Work\\xfs\\商品中心\\ProductCenterAutoTestFrame\\testFunctions\\test_basicQuery.py\", line 59, in test_query\n    assert res.json()['retStatus'] == '1'\n",
      "steps" : [ ],
      "attachments" : [ ],
      "parameters" : [ ],
      "stepsCount" : 0,
      "hasContent" : true,
      "attachmentsCount" : 0,
      "shouldDisplayMessage" : true
    } ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 4,
    "hasContent" : true,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : true
  },
  "afterStages" : [ ],
  "labels" : [ {
    "name" : "story",
    "value" : "测试接口集"
  }, {
    "name" : "feature",
    "value" : "基础接口探活测试"
  }, {
    "name" : "tag",
    "value" : "flaky(reruns=2, reruns_delay=2)"
  }, {
    "name" : "parentSuite",
    "value" : "testFunctions"
  }, {
    "name" : "suite",
    "value" : "test_basicQuery"
  }, {
    "name" : "subSuite",
    "value" : "TestBasicQuery"
  }, {
    "name" : "host",
    "value" : "XTZJ-20211021CS"
  }, {
    "name" : "thread",
    "value" : "6520-MainThread"
  }, {
    "name" : "framework",
    "value" : "pytest"
  }, {
    "name" : "language",
    "value" : "cpython3"
  }, {
    "name" : "package",
    "value" : "testFunctions.test_basicQuery"
  }, {
    "name" : "resultFormat",
    "value" : "allure2"
  } ],
  "parameters" : [ ],
  "links" : [ ],
  "hidden" : true,
  "retry" : true,
  "extra" : {
    "categories" : [ ],
    "tags" : [ "flaky(reruns=2, reruns_delay=2)" ]
  },
  "source" : "e37e3e3f79b93deb.json",
  "parameterValues" : [ ]
}